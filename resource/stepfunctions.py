import json
from networkx import DiGraph

class StepFunctionManager:

    def __init__(self, sfn_client):
        self.sfn_client = sfn_client

    def create_step_function(self, sfn_name:str,  role_arn: str, definition: str) -> str:
        response = self.sfn_client.create_state_machine(
            name=sfn_name,
            roleArn=role_arn,
            definition=definition
        )
        return response["stateMachineArn"]

    def delete_step_function(self, sfn_arn: str) -> bool:
        response = self.sfn_client.delete_state_machine(
            stateMachineArn=sfn_arn
        )

    def trigger_step_function(self,sfn_arn: str):
        response = self.sfn_client.start_execution(
            stateMachineArn=sfn_arn,
        )


    def build_asl(self, graph: DiGraph) -> str:

        asl = {
            "Comment": "Generated by pipedream",
            "States": {}
        }

        def traverse(node):
            if node == "stop":
                return
            for s in graph.successors(node):
                if s == 'stop':
                    continue
                prev_meta = graph.nodes[node].get("metadata",{})
                node_meta = graph.nodes[s].get("metadata", {})
                edge_meta = graph.edges[node,s].get("metadata", {})

                glue_args = node_meta.get("DefaultArguments", {})
                update_dict = {f"--{key}_data_source".upper(): prev_meta.get("output_data", {}).get(key) for key in edge_meta.get("data", []) if key}
                glue_args.update(update_dict)
                update_dict = {f"--{key}_data_sink".upper(): value for key, value in node_meta.get("output_data", {}).items()}
                glue_args.update(update_dict)
                
                nxt = graph.successors(s).__next__()
                is_end = nxt == 'stop'

                asl["States"][s] = {
                    "Type": "Task",
                    "Resource": "arn:aws:states:::glue:startJobRun.sync",
                    "Parameters": {
                        "JobName": node_meta["properties"]["Name"],
                        "Arguments": glue_args
                    },
                    f"{'End' if is_end else 'Next'}": True if is_end else nxt
                }

                traverse(s)
        if len(list(graph.successors('start'))) != 1:
            raise Exception('Not implemented')
        
        first = graph.successors('start').__next__()
        asl["StartAt"] = first
        traverse('start')
        return json.dumps(asl)